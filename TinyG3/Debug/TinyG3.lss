
TinyG3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000504  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000438  20070000  00080504  00010000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  20070438  0008093c  00010438  2**2
                  ALLOC
  3 .stack        00002004  20070454  00080958  00010438  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010438  2**0
                  CONTENTS, READONLY
  5 .comment      00000033  00000000  00000000  00010461  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002cee  00000000  00000000  00010494  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa4  00000000  00000000  00013182  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000030f  00000000  00000000  00013c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000138  00000000  00000000  00013f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000a8  00000000  00000000  0001406d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00010f66  00000000  00000000  00014115  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00002636  00000000  00000000  0002507b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0004c30e  00000000  00000000  000276b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000198  00000000  00000000  000739c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072458 	.word	0x20072458
   80004:	000801a9 	.word	0x000801a9
   80008:	000801a5 	.word	0x000801a5
   8000c:	000801a5 	.word	0x000801a5
   80010:	000801a5 	.word	0x000801a5
   80014:	000801a5 	.word	0x000801a5
   80018:	000801a5 	.word	0x000801a5
	...
   8002c:	000801a5 	.word	0x000801a5
   80030:	000801a5 	.word	0x000801a5
   80034:	00000000 	.word	0x00000000
   80038:	000801a5 	.word	0x000801a5
   8003c:	000801a5 	.word	0x000801a5
   80040:	000801a5 	.word	0x000801a5
   80044:	000801a5 	.word	0x000801a5
   80048:	000801a5 	.word	0x000801a5
   8004c:	000801a5 	.word	0x000801a5
   80050:	000801a5 	.word	0x000801a5
   80054:	000801a5 	.word	0x000801a5
   80058:	000801a5 	.word	0x000801a5
   8005c:	000801a5 	.word	0x000801a5
   80060:	000801a5 	.word	0x000801a5
   80064:	000801a5 	.word	0x000801a5
   80068:	00000000 	.word	0x00000000
   8006c:	000801a5 	.word	0x000801a5
   80070:	000801a5 	.word	0x000801a5
   80074:	000801a5 	.word	0x000801a5
   80078:	000801a5 	.word	0x000801a5
	...
   80084:	000801a5 	.word	0x000801a5
   80088:	000801a5 	.word	0x000801a5
   8008c:	000801a5 	.word	0x000801a5
   80090:	000801a5 	.word	0x000801a5
   80094:	000801a5 	.word	0x000801a5
   80098:	000801a5 	.word	0x000801a5
   8009c:	000801a5 	.word	0x000801a5
   800a0:	000801a5 	.word	0x000801a5
   800a4:	00000000 	.word	0x00000000
   800a8:	000801a5 	.word	0x000801a5
   800ac:	000801a5 	.word	0x000801a5
   800b0:	000801a5 	.word	0x000801a5
   800b4:	000801a5 	.word	0x000801a5
   800b8:	000801a5 	.word	0x000801a5
   800bc:	000801a5 	.word	0x000801a5
   800c0:	000801a5 	.word	0x000801a5
   800c4:	000801a5 	.word	0x000801a5
   800c8:	000801a5 	.word	0x000801a5
   800cc:	000801a5 	.word	0x000801a5
   800d0:	000801a5 	.word	0x000801a5
   800d4:	000801a5 	.word	0x000801a5
   800d8:	000801a5 	.word	0x000801a5
   800dc:	000801a5 	.word	0x000801a5
   800e0:	000801a5 	.word	0x000801a5
   800e4:	000801a5 	.word	0x000801a5
   800e8:	000801a5 	.word	0x000801a5
   800ec:	000801a5 	.word	0x000801a5
   800f0:	000801a5 	.word	0x000801a5

000800f4 <deregister_tm_clones>:
   800f4:	b508      	push	{r3, lr}
   800f6:	4805      	ldr	r0, [pc, #20]	; (8010c <deregister_tm_clones+0x18>)
   800f8:	4b05      	ldr	r3, [pc, #20]	; (80110 <deregister_tm_clones+0x1c>)
   800fa:	1a1b      	subs	r3, r3, r0
   800fc:	2b06      	cmp	r3, #6
   800fe:	d800      	bhi.n	80102 <deregister_tm_clones+0xe>
   80100:	bd08      	pop	{r3, pc}
   80102:	4b04      	ldr	r3, [pc, #16]	; (80114 <deregister_tm_clones+0x20>)
   80104:	2b00      	cmp	r3, #0
   80106:	d0fb      	beq.n	80100 <deregister_tm_clones+0xc>
   80108:	4798      	blx	r3
   8010a:	e7f9      	b.n	80100 <deregister_tm_clones+0xc>
   8010c:	00080504 	.word	0x00080504
   80110:	00080507 	.word	0x00080507
   80114:	00000000 	.word	0x00000000

00080118 <register_tm_clones>:
   80118:	b508      	push	{r3, lr}
   8011a:	4807      	ldr	r0, [pc, #28]	; (80138 <register_tm_clones+0x20>)
   8011c:	4b07      	ldr	r3, [pc, #28]	; (8013c <register_tm_clones+0x24>)
   8011e:	1a1b      	subs	r3, r3, r0
   80120:	109b      	asrs	r3, r3, #2
   80122:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   80126:	1059      	asrs	r1, r3, #1
   80128:	d100      	bne.n	8012c <register_tm_clones+0x14>
   8012a:	bd08      	pop	{r3, pc}
   8012c:	4a04      	ldr	r2, [pc, #16]	; (80140 <register_tm_clones+0x28>)
   8012e:	2a00      	cmp	r2, #0
   80130:	d0fb      	beq.n	8012a <register_tm_clones+0x12>
   80132:	4790      	blx	r2
   80134:	e7f9      	b.n	8012a <register_tm_clones+0x12>
   80136:	bf00      	nop
   80138:	00080504 	.word	0x00080504
   8013c:	00080504 	.word	0x00080504
   80140:	00000000 	.word	0x00000000

00080144 <__do_global_dtors_aux>:
   80144:	b510      	push	{r4, lr}
   80146:	4c06      	ldr	r4, [pc, #24]	; (80160 <__do_global_dtors_aux+0x1c>)
   80148:	7823      	ldrb	r3, [r4, #0]
   8014a:	b943      	cbnz	r3, 8015e <__do_global_dtors_aux+0x1a>
   8014c:	f7ff ffd2 	bl	800f4 <deregister_tm_clones>
   80150:	4b04      	ldr	r3, [pc, #16]	; (80164 <__do_global_dtors_aux+0x20>)
   80152:	b113      	cbz	r3, 8015a <__do_global_dtors_aux+0x16>
   80154:	4804      	ldr	r0, [pc, #16]	; (80168 <__do_global_dtors_aux+0x24>)
   80156:	f3af 8000 	nop.w
   8015a:	2301      	movs	r3, #1
   8015c:	7023      	strb	r3, [r4, #0]
   8015e:	bd10      	pop	{r4, pc}
   80160:	20070438 	.word	0x20070438
   80164:	00000000 	.word	0x00000000
   80168:	00080504 	.word	0x00080504

0008016c <frame_dummy>:
   8016c:	b508      	push	{r3, lr}
   8016e:	4b08      	ldr	r3, [pc, #32]	; (80190 <frame_dummy+0x24>)
   80170:	b11b      	cbz	r3, 8017a <frame_dummy+0xe>
   80172:	4808      	ldr	r0, [pc, #32]	; (80194 <frame_dummy+0x28>)
   80174:	4908      	ldr	r1, [pc, #32]	; (80198 <frame_dummy+0x2c>)
   80176:	f3af 8000 	nop.w
   8017a:	4808      	ldr	r0, [pc, #32]	; (8019c <frame_dummy+0x30>)
   8017c:	6803      	ldr	r3, [r0, #0]
   8017e:	b113      	cbz	r3, 80186 <frame_dummy+0x1a>
   80180:	4b07      	ldr	r3, [pc, #28]	; (801a0 <frame_dummy+0x34>)
   80182:	b103      	cbz	r3, 80186 <frame_dummy+0x1a>
   80184:	4798      	blx	r3
   80186:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8018a:	f7ff bfc5 	b.w	80118 <register_tm_clones>
   8018e:	bf00      	nop
   80190:	00000000 	.word	0x00000000
   80194:	00080504 	.word	0x00080504
   80198:	2007043c 	.word	0x2007043c
   8019c:	00080504 	.word	0x00080504
   801a0:	00000000 	.word	0x00000000

000801a4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   801a4:	e7fe      	b.n	801a4 <Dummy_Handler>
   801a6:	bf00      	nop

000801a8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   801a8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   801aa:	f240 5204 	movw	r2, #1284	; 0x504
   801ae:	f2c0 0208 	movt	r2, #8
   801b2:	f240 0300 	movw	r3, #0
   801b6:	f2c2 0307 	movt	r3, #8199	; 0x2007
   801ba:	429a      	cmp	r2, r3
   801bc:	d003      	beq.n	801c6 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   801be:	4b2b      	ldr	r3, [pc, #172]	; (8026c <Reset_Handler+0xc4>)
   801c0:	4a2b      	ldr	r2, [pc, #172]	; (80270 <Reset_Handler+0xc8>)
   801c2:	429a      	cmp	r2, r3
   801c4:	d304      	bcc.n	801d0 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   801c6:	4b2b      	ldr	r3, [pc, #172]	; (80274 <Reset_Handler+0xcc>)
   801c8:	4a2b      	ldr	r2, [pc, #172]	; (80278 <Reset_Handler+0xd0>)
   801ca:	429a      	cmp	r2, r3
   801cc:	d318      	bcc.n	80200 <Reset_Handler+0x58>
   801ce:	e027      	b.n	80220 <Reset_Handler+0x78>

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   801d0:	4b2a      	ldr	r3, [pc, #168]	; (8027c <Reset_Handler+0xd4>)
   801d2:	4c2b      	ldr	r4, [pc, #172]	; (80280 <Reset_Handler+0xd8>)
   801d4:	1ae4      	subs	r4, r4, r3
   801d6:	f024 0403 	bic.w	r4, r4, #3
   801da:	f104 0404 	add.w	r4, r4, #4
   801de:	f04f 0300 	mov.w	r3, #0
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
			*pDest++ = *pSrc++;
   801e2:	f240 0000 	movw	r0, #0
   801e6:	f2c2 0007 	movt	r0, #8199	; 0x2007
   801ea:	f240 5104 	movw	r1, #1284	; 0x504
   801ee:	f2c0 0108 	movt	r1, #8
   801f2:	585a      	ldr	r2, [r3, r1]
   801f4:	501a      	str	r2, [r3, r0]
   801f6:	f103 0304 	add.w	r3, r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   801fa:	42a3      	cmp	r3, r4
   801fc:	d1f9      	bne.n	801f2 <Reset_Handler+0x4a>
   801fe:	e7e2      	b.n	801c6 <Reset_Handler+0x1e>
   80200:	4b20      	ldr	r3, [pc, #128]	; (80284 <Reset_Handler+0xdc>)

/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
   80202:	4921      	ldr	r1, [pc, #132]	; (80288 <Reset_Handler+0xe0>)
   80204:	1ac9      	subs	r1, r1, r3
   80206:	f021 0103 	bic.w	r1, r1, #3
   8020a:	f240 4238 	movw	r2, #1080	; 0x438
   8020e:	f2c2 0207 	movt	r2, #8199	; 0x2007
   80212:	188a      	adds	r2, r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80214:	f04f 0100 	mov.w	r1, #0
   80218:	f843 1f04 	str.w	r1, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8021c:	4293      	cmp	r3, r2
   8021e:	d1fb      	bne.n	80218 <Reset_Handler+0x70>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80220:	f240 0300 	movw	r3, #0
   80224:	f2c0 0308 	movt	r3, #8
   80228:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
   8022c:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
   80230:	f44f 426d 	mov.w	r2, #60672	; 0xed00
   80234:	f2ce 0200 	movt	r2, #57344	; 0xe000
   80238:	6091      	str	r1, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8023a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8023e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
		SCB->VTOR |= (1UL) << SCB_VTOR_TBLBASE_Pos;
   80242:	bf3f      	itttt	cc
   80244:	f44f 436d 	movcc.w	r3, #60672	; 0xed00
   80248:	f2ce 0300 	movtcc	r3, #57344	; 0xe000
   8024c:	689a      	ldrcc	r2, [r3, #8]
   8024e:	f042 5200 	orrcc.w	r2, r2, #536870912	; 0x20000000
   80252:	bf38      	it	cc
   80254:	609a      	strcc	r2, [r3, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80256:	f240 33dd 	movw	r3, #989	; 0x3dd
   8025a:	f2c0 0308 	movt	r3, #8
   8025e:	4798      	blx	r3

	/* Branch to main function */
	main();
   80260:	f240 3391 	movw	r3, #913	; 0x391
   80264:	f2c0 0308 	movt	r3, #8
   80268:	4798      	blx	r3
   8026a:	e7fe      	b.n	8026a <Reset_Handler+0xc2>
   8026c:	20070438 	.word	0x20070438
   80270:	20070000 	.word	0x20070000
   80274:	20070454 	.word	0x20070454
   80278:	20070438 	.word	0x20070438
   8027c:	20070004 	.word	0x20070004
   80280:	2007043b 	.word	0x2007043b
   80284:	20070434 	.word	0x20070434
   80288:	2007044f 	.word	0x2007044f

0008028c <SystemInit>:
 * Initialize the System and update the SystemFrequency variable.
 */
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
   8028c:	f44f 6320 	mov.w	r3, #2560	; 0xa00
   80290:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80294:	f44f 6280 	mov.w	r2, #1024	; 0x400
   80298:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
   8029a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   8029e:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802a2:	601a      	str	r2, [r3, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   802a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   802a8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802ac:	6a1b      	ldr	r3, [r3, #32]
   802ae:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   802b2:	d110      	bne.n	802d6 <SystemInit+0x4a>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
   802b4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   802b8:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802bc:	f640 0209 	movw	r2, #2057	; 0x809
   802c0:	f2c0 0237 	movt	r2, #55	; 0x37
   802c4:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
   802c6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   802ca:	f2c4 020e 	movt	r2, #16398	; 0x400e
   802ce:	6e93      	ldr	r3, [r2, #104]	; 0x68
   802d0:	f013 0f01 	tst.w	r3, #1
   802d4:	d0fb      	beq.n	802ce <SystemInit+0x42>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
   802d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   802da:	f2c4 030e 	movt	r3, #16398	; 0x400e
   802de:	f640 0209 	movw	r2, #2057	; 0x809
   802e2:	f2c0 1237 	movt	r2, #311	; 0x137
   802e6:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
   802e8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   802ec:	f2c4 020e 	movt	r2, #16398	; 0x400e
   802f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   802f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   802f6:	d0fb      	beq.n	802f0 <SystemInit+0x64>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
   802f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   802fc:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80302:	f022 0203 	bic.w	r2, r2, #3
   80306:	f042 0201 	orr.w	r2, r2, #1
   8030a:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
   8030c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80310:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80314:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80316:	f013 0f08 	tst.w	r3, #8
   8031a:	d0fb      	beq.n	80314 <SystemInit+0x88>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
   8031c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80320:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80324:	f643 7201 	movw	r2, #16129	; 0x3f01
   80328:	f2c2 020d 	movt	r2, #8205	; 0x200d
   8032c:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
   8032e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80332:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80336:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80338:	f013 0f02 	tst.w	r3, #2
   8033c:	d0fb      	beq.n	80336 <SystemInit+0xaa>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
   8033e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80342:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80346:	f04f 0211 	mov.w	r2, #17
   8034a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
   8034c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   80350:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80354:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80356:	f013 0f08 	tst.w	r3, #8
   8035a:	d0fb      	beq.n	80354 <SystemInit+0xc8>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
   8035c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   80360:	f2c4 030e 	movt	r3, #16398	; 0x400e
   80364:	f04f 0212 	mov.w	r2, #18
   80368:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
   8036a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   8036e:	f2c4 020e 	movt	r2, #16398	; 0x400e
   80372:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80374:	f013 0f08 	tst.w	r3, #8
   80378:	d0fb      	beq.n	80372 <SystemInit+0xe6>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
   8037a:	f240 0300 	movw	r3, #0
   8037e:	f2c2 0307 	movt	r3, #8199	; 0x2007
   80382:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
   80386:	f2c0 5201 	movt	r2, #1281	; 0x501
   8038a:	601a      	str	r2, [r3, #0]
   8038c:	4770      	bx	lr
   8038e:	bf00      	nop

00080390 <main>:
 * \brief Application entry point.
 *
 * \return Unused (ANSI-C compatibility).
 */
int main(void)
{
   80390:	b508      	push	{r3, lr}
    /* Initialize the SAM system */
    SystemInit();
   80392:	f240 238d 	movw	r3, #653	; 0x28d
   80396:	f2c0 0308 	movt	r3, #8
   8039a:	4798      	blx	r3
   8039c:	e7fe      	b.n	8039c <main+0xc>
   8039e:	bf00      	nop

000803a0 <atexit>:
   803a0:	4601      	mov	r1, r0
   803a2:	2000      	movs	r0, #0
   803a4:	4602      	mov	r2, r0
   803a6:	4603      	mov	r3, r0
   803a8:	f000 b83e 	b.w	80428 <__register_exitproc>

000803ac <__libc_fini_array>:
   803ac:	b570      	push	{r4, r5, r6, lr}
   803ae:	4b09      	ldr	r3, [pc, #36]	; (803d4 <__libc_fini_array+0x28>)
   803b0:	4c09      	ldr	r4, [pc, #36]	; (803d8 <__libc_fini_array+0x2c>)
   803b2:	2500      	movs	r5, #0
   803b4:	1ae4      	subs	r4, r4, r3
   803b6:	10a4      	asrs	r4, r4, #2
   803b8:	eb03 0684 	add.w	r6, r3, r4, lsl #2
   803bc:	e002      	b.n	803c4 <__libc_fini_array+0x18>
   803be:	5972      	ldr	r2, [r6, r5]
   803c0:	4790      	blx	r2
   803c2:	3c01      	subs	r4, #1
   803c4:	3d04      	subs	r5, #4
   803c6:	2c00      	cmp	r4, #0
   803c8:	d1f9      	bne.n	803be <__libc_fini_array+0x12>
   803ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   803ce:	f000 b891 	b.w	804f4 <_fini>
   803d2:	bf00      	nop
   803d4:	00080500 	.word	0x00080500
   803d8:	00080504 	.word	0x00080504

000803dc <__libc_init_array>:
   803dc:	b570      	push	{r4, r5, r6, lr}
   803de:	4b0e      	ldr	r3, [pc, #56]	; (80418 <__libc_init_array+0x3c>)
   803e0:	4d0e      	ldr	r5, [pc, #56]	; (8041c <__libc_init_array+0x40>)
   803e2:	2400      	movs	r4, #0
   803e4:	1aed      	subs	r5, r5, r3
   803e6:	10ad      	asrs	r5, r5, #2
   803e8:	461e      	mov	r6, r3
   803ea:	e003      	b.n	803f4 <__libc_init_array+0x18>
   803ec:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   803f0:	4790      	blx	r2
   803f2:	3401      	adds	r4, #1
   803f4:	42ac      	cmp	r4, r5
   803f6:	d1f9      	bne.n	803ec <__libc_init_array+0x10>
   803f8:	f000 f872 	bl	804e0 <_init>
   803fc:	4d08      	ldr	r5, [pc, #32]	; (80420 <__libc_init_array+0x44>)
   803fe:	4b09      	ldr	r3, [pc, #36]	; (80424 <__libc_init_array+0x48>)
   80400:	2400      	movs	r4, #0
   80402:	1aed      	subs	r5, r5, r3
   80404:	10ad      	asrs	r5, r5, #2
   80406:	461e      	mov	r6, r3
   80408:	e003      	b.n	80412 <__libc_init_array+0x36>
   8040a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
   8040e:	4790      	blx	r2
   80410:	3401      	adds	r4, #1
   80412:	42ac      	cmp	r4, r5
   80414:	d1f9      	bne.n	8040a <__libc_init_array+0x2e>
   80416:	bd70      	pop	{r4, r5, r6, pc}
   80418:	000804ec 	.word	0x000804ec
   8041c:	000804ec 	.word	0x000804ec
   80420:	000804f4 	.word	0x000804f4
   80424:	000804ec 	.word	0x000804ec

00080428 <__register_exitproc>:
   80428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8042c:	4698      	mov	r8, r3
   8042e:	4b23      	ldr	r3, [pc, #140]	; (804bc <__register_exitproc+0x94>)
   80430:	4606      	mov	r6, r0
   80432:	681c      	ldr	r4, [r3, #0]
   80434:	460f      	mov	r7, r1
   80436:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
   8043a:	4691      	mov	r9, r2
   8043c:	b918      	cbnz	r0, 80446 <__register_exitproc+0x1e>
   8043e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
   80442:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   80446:	6841      	ldr	r1, [r0, #4]
   80448:	291f      	cmp	r1, #31
   8044a:	dd16      	ble.n	8047a <__register_exitproc+0x52>
   8044c:	4b1c      	ldr	r3, [pc, #112]	; (804c0 <__register_exitproc+0x98>)
   8044e:	b91b      	cbnz	r3, 80458 <__register_exitproc+0x30>
   80450:	f04f 30ff 	mov.w	r0, #4294967295
   80454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80458:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8045c:	f3af 8000 	nop.w
   80460:	2800      	cmp	r0, #0
   80462:	d0f5      	beq.n	80450 <__register_exitproc+0x28>
   80464:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80468:	2500      	movs	r5, #0
   8046a:	6045      	str	r5, [r0, #4]
   8046c:	6001      	str	r1, [r0, #0]
   8046e:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
   80472:	f8c0 5188 	str.w	r5, [r0, #392]	; 0x188
   80476:	f8c0 518c 	str.w	r5, [r0, #396]	; 0x18c
   8047a:	b1b6      	cbz	r6, 804aa <__register_exitproc+0x82>
   8047c:	6844      	ldr	r4, [r0, #4]
   8047e:	2201      	movs	r2, #1
   80480:	fa02 f204 	lsl.w	r2, r2, r4
   80484:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
   80488:	eb00 0384 	add.w	r3, r0, r4, lsl #2
   8048c:	4311      	orrs	r1, r2
   8048e:	2e02      	cmp	r6, #2
   80490:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
   80494:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
   80498:	461c      	mov	r4, r3
   8049a:	f8c3 8108 	str.w	r8, [r3, #264]	; 0x108
   8049e:	d104      	bne.n	804aa <__register_exitproc+0x82>
   804a0:	f8d0 318c 	ldr.w	r3, [r0, #396]	; 0x18c
   804a4:	431a      	orrs	r2, r3
   804a6:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
   804aa:	6843      	ldr	r3, [r0, #4]
   804ac:	1c9a      	adds	r2, r3, #2
   804ae:	3301      	adds	r3, #1
   804b0:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
   804b4:	6043      	str	r3, [r0, #4]
   804b6:	2000      	movs	r0, #0
   804b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   804bc:	000804d8 	.word	0x000804d8
   804c0:	00000000 	.word	0x00000000

000804c4 <register_fini>:
   804c4:	4b02      	ldr	r3, [pc, #8]	; (804d0 <register_fini+0xc>)
   804c6:	b113      	cbz	r3, 804ce <register_fini+0xa>
   804c8:	4802      	ldr	r0, [pc, #8]	; (804d4 <register_fini+0x10>)
   804ca:	f7ff bf69 	b.w	803a0 <atexit>
   804ce:	4770      	bx	lr
   804d0:	00000000 	.word	0x00000000
   804d4:	000803ad 	.word	0x000803ad

000804d8 <_global_impure_ptr>:
   804d8:	20070010 00000043                       ... C...

000804e0 <_init>:
   804e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804e2:	bf00      	nop
   804e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   804e6:	bc08      	pop	{r3}
   804e8:	469e      	mov	lr, r3
   804ea:	4770      	bx	lr

000804ec <__init_array_start>:
   804ec:	000804c5 	.word	0x000804c5

000804f0 <__frame_dummy_init_array_entry>:
   804f0:	0008016d                                m...

000804f4 <_fini>:
   804f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   804f6:	bf00      	nop
   804f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   804fa:	bc08      	pop	{r3}
   804fc:	469e      	mov	lr, r3
   804fe:	4770      	bx	lr

00080500 <__fini_array_start>:
   80500:	00080145 	.word	0x00080145
